name: Deploy Fragments

on:
  push:
    branches:
      - main
    paths:
      - 'packages/webfragments/**'
      - '.github/workflows/deploy-fragments.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "fragments"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install

      - name: Inspect Source Structure
        run: |
          echo "📂 Source directory structure:"
          tree packages/webfragments/src
          
          echo "\n📄 Demo HTML contents:"
          for fragment in party-button dashboard; do
            echo "\n=== $fragment demo/index.html ==="
            cat "packages/webfragments/src/fragments/$fragment/demo/index.html"
          done

      - name: Build Fragments
        run: |
          export NODE_ENV=production
          pnpm --filter @webfragments/core run build

      - name: Inspect Build Output
        run: |
          echo "📦 Build output structure:"
          tree packages/webfragments/dist
          
          echo "\n📄 Built demo HTML contents:"
          find packages/webfragments/dist -name "index.html" -exec sh -c '
            echo "\n=== {} ===";
            cat "{}"
          ' \;

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Deployment
        run: |
          # Create temporary directory and copy build output
          mkdir -p tmp_deployment/fragments
          cp -r packages/webfragments/dist/* tmp_deployment/fragments/
          
          echo "📦 Final deployment structure:"
          tree tmp_deployment
          
          echo "\n📄 Final demo HTML locations and contents:"
          find tmp_deployment -name "index.html" -exec sh -c '
            echo "\n=== {} ===";
            cat "{}"
          ' \;

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './tmp_deployment'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify Deployment
        run: |
          echo "🚀 Fragments have been deployed!"
          echo "📍 Checking deployment URLs:"
          
          urls=(
            "fragments/party-button/demo/index.html"
            "fragments/dashboard/demo/index.html"
            "fragments/party-button/index.js"
            "fragments/dashboard/index.js"
          )
          
          for path in "${urls[@]}"; do
            url="${{ steps.deployment.outputs.page_url }}${path}"
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "Checking $url - Status: $code"
          done 